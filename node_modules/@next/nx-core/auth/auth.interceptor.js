import { Injectable, Injector, Inject } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { AuthService } from '../services/auth.service';
import { throwError } from 'rxjs';
import 'rxjs/add/operator/do';
import 'rxjs/add/operator/catch';
import 'rxjs/add/observable/throw';
import { Router } from '@angular/router';
import { LoadingService } from '../services/loading.service';
import { LoginService } from '../services/login.service';
import { catchError, tap, finalize } from 'rxjs/operators';
import { ErrorStreamService } from '../services/error-stream.service';
import { CookieService } from 'ngx-cookie-service';
var AuthInterceptor = /** @class */ (function () {
    function AuthInterceptor(config, injector, router, loadingService, loginService, errorService, cookieService) {
        this.config = config;
        this.injector = injector;
        this.router = router;
        this.loadingService = loadingService;
        this.loginService = loginService;
        this.errorService = errorService;
        this.cookieService = cookieService;
        this.endpoint = this.config.endpoint;
        if (!this.endsWith(this.endpoint, '/')) {
            this.endpoint = this.endpoint + '/';
        }
    }
    AuthInterceptor.prototype.endsWith = function (base, suffix) {
        return base.indexOf(suffix, base.length - suffix.length) >= 0;
    };
    AuthInterceptor.prototype.intercept = function (request, next) {
        var _this = this;
        // Loading....
        // this.loadingService.showLoading(true);
        this.loginService.setMessage(false, '');
        var authService = this.injector.get(AuthService);
        if (this.endsWith(request.url, 'login') && request.method === 'POST') {
            this.loadingService.showLoading(true);
            request = request.clone({
                url: this.config.endpoint + request.url
            });
        }
        else if (request.url.indexOf('assets') > -1) {
            this.loadingService.showLoading(false);
            request = request.clone({
                url: request.url
            });
        }
        else if (request.url.indexOf('http') === 0 && request.url.indexOf('://') > 0) {
            this.loadingService.showLoading(true);
            request = request.clone({
                url: request.url
            });
        }
        else {
            this.loadingService.showLoading(true);
            var token = authService.getToken();
            request = request.clone({
                url: this.config.endpoint + request.url,
                setHeaders: {
                    Authorization: "" + (token || '')
                }
            });
        }
        return next.handle(request).pipe(tap(function (event) {
            // this.loadingService.showLoading(false);
        }), catchError(function (error) {
            // There is an Error
            _this.loadingService.showLoading(false);
            if (error instanceof HttpErrorResponse) {
                if (error.status === 401 || error.status === 403) {
                    if (error.status === 403) {
                        // Logout
                        var token = authService.getToken();
                        request = request.clone({
                            url: _this.config.endpoint + '/seguridad/login',
                            method: 'DELETE',
                            setHeaders: {
                                Authorization: "" + (token || '')
                            }
                        });
                        var rtn = next.handle(request);
                    }
                    localStorage.removeItem('currentUser');
                    _this.cookieService.delete('currentUser');
                    _this.router.navigateByUrl('/login');
                }
                if (error.status >= 500) {
                    _this.errorService.setMessage(error.status, error.error.message);
                }
                _this.loginService.setMessage(true, error.error.message);
            }
            console.warn(error);
            return throwError(error);
        }), finalize(function () {
            _this.loadingService.showLoading(false);
        }));
    };
    AuthInterceptor.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    AuthInterceptor.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: ['config',] },] },
        { type: Injector, },
        { type: Router, },
        { type: LoadingService, },
        { type: LoginService, },
        { type: ErrorStreamService, },
        { type: CookieService, },
    ]; };
    return AuthInterceptor;
}());
export { AuthInterceptor };
//# sourceMappingURL=auth.interceptor.js.map
import { Directive, Input, Output, EventEmitter, HostListener } from '@angular/core';
import 'rxjs/add/observable/interval';
import 'rxjs/add/operator/throttle';
import 'rxjs/add/operator/merge';
import { Observable } from 'rxjs/Observable';
/**
 * Inactivity directive
 */
var NxInactivityDirective = /** @class */ (function () {
    function NxInactivityDirective() {
        // setTimeout(() => {
        //   // this.aliveId = setInterval(
        //   //   () => this.ngxAliveCallback.emit(true),
        //   //   this.ngxInactivity * 60000
        //   // );
        //   this.aliveId = interval(this.ngxInactivity * 60000);
        var _this = this;
        /**
         * Mouse move event emitter
         */
        this.mousemove = new EventEmitter();
        /**
         * Mouse down event emitter
         */
        this.mousedown = new EventEmitter();
        /**
         * Keypress event emitter
         */
        this.keypress = new EventEmitter();
        /**
         * Inactivity timeout limit (defaults 15 minutes)
         */
        this.ngxInactivity = 15;
        /**
         * Inactivity interval (defaults 3000 ms)
         */
        this.ngxInactivityInterval = 180000;
        /**
         * Inactivity callback after timeout
         */
        this.ngxInactivityCallback = new EventEmitter();
        /**
         * Still alive timeout
         */
        this.ngxAliveCallback = new EventEmitter();
        //   this.aliveId.subscribe(() => {
        //     this.ngxAliveCallback.emit(true);
        //   });
        // }, 3000);
        this.timeoutId = setTimeout(function () {
            // clearTimeout(this.aliveId);
            // this.aliveId.unsubscribe();
            _this.ngxInactivityCallback.emit(true);
        }, this.ngxInactivity * 60000);
        /*
         * Merge to flattens multiple Observables together
         * by blending their values into one Observable
         */
        this.mousemove
            .merge(this.mousedown, this.keypress)
            /*
             * Debounce to emits a value from the source Observable
             * only after a particular time span
             */
            .throttle(function () { return Observable.interval(_this.ngxInactivityInterval); })
            /*
             * Subscribe to handle emitted values
             */
            .subscribe(function () {
            // Ping to alive
            _this.ngxAliveCallback.emit(true);
            _this.reset();
            _this.start();
        });
    }
    /**
     * Attach a mouse move listener
     */
    NxInactivityDirective.prototype.onMousemove = function (event) {
        this.mousemove.emit(event);
    };
    /**
     * Atach a mouse down listener
     */
    NxInactivityDirective.prototype.onMousedown = function (event) {
        this.mousedown.emit(event);
    };
    /**
     * Attach a key press listener
     */
    NxInactivityDirective.prototype.onKeypress = function (event) {
        this.keypress.emit(event);
    };
    /**
     * Start inactivity timer
     */
    NxInactivityDirective.prototype.start = function () {
        var _this = this;
        /**
         * Inactivity callback if timeout (in minutes) is exceeded
         */
        this.timeoutId = setTimeout(function () {
            // clearTimeout(this.aliveId);
            // this.aliveId.unsubscribe();
            _this.ngxInactivityCallback.emit(true);
            _this.start();
        }, this.ngxInactivity * 60000);
    };
    /**
     * Reset inactivity timer
     */
    NxInactivityDirective.prototype.reset = function () {
        clearTimeout(this.timeoutId);
    };
    NxInactivityDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[nxInactivity]'
                },] },
    ];
    /** @nocollapse */
    NxInactivityDirective.ctorParameters = function () { return []; };
    NxInactivityDirective.propDecorators = {
        'ngxInactivity': [{ type: Input },],
        'ngxInactivityInterval': [{ type: Input },],
        'ngxInactivityCallback': [{ type: Output },],
        'ngxAliveCallback': [{ type: Output },],
        'onMousemove': [{ type: HostListener, args: ['document:mousemove', ['$event'],] },],
        'onMousedown': [{ type: HostListener, args: ['document:mousedown', ['$event'],] },],
        'onKeypress': [{ type: HostListener, args: ['document:keypress', ['$event'],] },],
    };
    return NxInactivityDirective;
}());
export { NxInactivityDirective };
//# sourceMappingURL=inactivity.directive.js.map
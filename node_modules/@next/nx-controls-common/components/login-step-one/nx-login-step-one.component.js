import { Component, Input, Output, EventEmitter, ViewChild } from '@angular/core';
var NxLoginStepOneComponent = /** @class */ (function () {
    function NxLoginStepOneComponent() {
        this.helpEvent = new EventEmitter();
        this.nextEvent = new EventEmitter();
        this.inputSettings = {
            inputLabel: '',
            inputMinChars: 8,
            inputMaxChars: 10,
            browserVersionsRef: ''
        };
        this.errorMsg = '';
        this.errorMsgChange = new EventEmitter();
        this.errorBrowserMsg = '';
        this.errorBrowserMsgChange = new EventEmitter();
        this.restrictionMessage = {
            header: "Seguimos mejorando",
            content: "¡Descarga ya! la App!.",
            imgButton: [{ url: "#", img: "../../../../assets/img/appstore.png" }, { url: "#", img: "../../../../assets/img/appstore.png" }],
            footer: "Si deseas realizar ...",
        };
        this.restrictionActive = true;
        this.logoUrl = '/assets/img/logo.png';
        this.contactInfo = [
            { place: 'Monterrey', phone: '2267 3446', description: '(BANREGIO)' },
            { place: 'Resto del país', phone: '01 81 2267 3446', description: '(BANREGIO)' },
            { place: 'EUA y Canadá', phone: '1 866 4320 550', description: '' }
        ];
        this.name = '';
        this.nameTmp = '';
        this.disabledBtn = true;
        this.isHide = true;
    }
    NxLoginStepOneComponent.prototype.ngOnInit = function () {
        this.trgFocusEl.nativeElement.focus();
    };
    NxLoginStepOneComponent.prototype.checkBrowsers = function () {
        var sayswho = (function () {
            var ua = navigator.userAgent, tem, M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
            if (/trident/i.test(M[1])) {
                tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
                return 'IE ' + (tem[1] || '');
            }
            if (M[1] === 'Chrome') {
                tem = ua.match(/\b(OPR|Edge)\/(\d+)/);
                if (tem != null)
                    return tem
                        .slice(1)
                        .join(' ')
                        .replace('OPR', 'Opera');
            }
            M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
            if ((tem = ua.match(/version\/(\d+)/i)) != null)
                M.splice(1, 1, tem[1]);
            return M.join(' ');
        })();
        console.log(sayswho);
        if (sayswho.indexOf('Opera') > -1 ||
            sayswho.indexOf('IE ') > -1) {
            this.errorBrowserMsg =
                'versiones soportadas.';
        }
        else {
            var _version = sayswho.length > 4 ? sayswho.split(' ') : ['', '70'];
            // console.log(+_version[1]);
            if (+_version[1] < 45 && _version[0] != 'Safari') {
                this.errorBrowserMsg =
                    'versiones soportadas.';
            }
        }
        var browserData = sayswho.length > 4 ? sayswho.split(' ') : ['', '70'];
        if (browserData[0] === 'Chrome' && parseInt(browserData[1]) <= 50) {
            this.errorBrowserMsg = 'versiones soportadas';
        }
    };
    NxLoginStepOneComponent.prototype.helpClick = function (e) {
        this.helpEvent.emit(e);
    };
    NxLoginStepOneComponent.prototype.nextClick = function (e) {
        this.nextEvent.emit(this.name);
    };
    NxLoginStepOneComponent.prototype.keyupEvent = function (e) {
        this.errorMsg = '';
        this.errorMsgChange.emit(this.errorMsg);
        if (this.name.length >= this.inputSettings.inputMinChars) {
            this.disabledBtn = false;
            if (e.keyCode === 13 || e.code === 'Enter') {
                var msg = e;
                this.nextClick(msg);
                this.name = '';
            }
        }
        else {
            this.disabledBtn = true;
        }
        if (this.name.length > this.inputSettings.inputMaxChars) {
            this.name = this.name.substr(0, this.inputSettings.inputMaxChars);
        }
    };
    NxLoginStepOneComponent.prototype.onPaste = function (e) {
        this.name = e;
    };
    NxLoginStepOneComponent.prototype.showUser = function () {
        this.isHide = !this.isHide;
    };
    NxLoginStepOneComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-login-step-one',
                    template: "\n    <div class=\"login-container\">\n        <div class=\"login-banner\"><img src=\"{{ logoUrl }}\" alt=\"\" /></div>\n        <div class=\"login\">\n            <div class=\"grid\">\n                <div class=\"col-12\">\n                    <div class=\"login-title\">\n                        <div class=\"login-steps\">\n                            <span class=\"active\"> </span> <span> </span> <span> </span>\n                        </div>\n                        <h2>Iniciar sesi\u00F3n</h2>\n                    </div>\n                </div>\n                <div class=\"col-12\">\n                    <div class=\"login-sub-title\">\n                        <h4>{{ inputSettings.inputLabel }}</h4>\n                        <a (click)=\"helpClick($event)\">C\u00F3mo entro?</a>\n                    </div>\n                </div>\n                <div class=\"col-12\">\n                    <div class=\"login-content\">\n                        <input id=\"nx-login-username\" [type]=\"isHide ? 'password' : 'text'\" maxlength=\"{{ inputSettings.inputMaxChars }}\" [ngModel]=\"name\" (ngModelChange)=\"onPaste($event)\" (keyup)=\"keyupEvent($event)\" #userName />\n                        <i class=\"icon {{isHide ? 'ion-eye-disabled' : 'ion-eye'}} login-eye\" (click)=\"showUser()\"></i>\n                        <h5 class=\"login-error-message\" *ngIf=\"errorMsg\">{{ errorMsg }}</h5>\n                    </div>\n                </div>\n                <div class=\"col-12\">\n                    <div class=\"login-bottom\">\n                        <div class=\"nx-link dark\" (click)=\"helpClick($event)\">\u00BFC\u00F3mo Ingreso?</div>\n                        <button id=\"nx-login-next-btn\" class=\"primary\" [disabled]=\"disabledBtn\" (click)=\"nextClick($event)\">Continuar</button>\n                        <button id=\"nx-login-next-btn\" class=\"default responsive\" (click)=\"helpClick($event)\">\u00BFC\u00F3mo Ingreso?</button>\n                    </div>\n                </div>\n            </div>\n            <div class=\"restriction\" *ngIf=\"restrictionActive\">\n                <div class=\"restriction-header\">\n                    <h3>{{restrictionMessage.header}} </h3>\n                </div>\n                <div class=\"divider\"></div>\n                <div class=\"restriction-content\">\n                    <span>{{restrictionMessage.content}}</span>\n                </div>\n                <div class=\"restriction-action\">\n                    <div *ngFor=\"let item of restrictionMessage.imgButton\">\n                        <a href={{item.url}}>\n                           <img src={{item.img}} alt=\"appstore\" width=\"150px\">\n                        </a>\n                    </div>\n                </div>\n                <div class=\"restriction-footer\" >\n                    <span>{{restrictionMessage.footer}}</span>\n                </div>\n            </div>\n        </div>\n        <div class=\"login-footer\">\n            <div class=\"title\">\n                Si lo necesitas, ll\u00E1manos. Con gusto te atenderemos.\n            </div>\n            <div class=\"grid-3\">\n                <div class=\"col\" *ngFor=\"let item of contactInfo\">\n                    <span>{{ item.place }}</span>\n                    <span class=\"color-light\">{{ item.phone }}</span>\n                    <span>{{ item.description }}</span>\n                </div>\n            </div>\n        </div>\n    </div>\n  ",
                    styles: ["\n    .login-bottom{text-align:right}.login-bottom button{margin-left:10px}\n  "]
                },] },
    ];
    /** @nocollapse */
    NxLoginStepOneComponent.ctorParameters = function () { return []; };
    NxLoginStepOneComponent.propDecorators = {
        'trgFocusEl': [{ type: ViewChild, args: ['userName',] },],
        'helpEvent': [{ type: Output },],
        'nextEvent': [{ type: Output },],
        'inputSettings': [{ type: Input },],
        'errorMsg': [{ type: Input },],
        'errorMsgChange': [{ type: Output },],
        'errorBrowserMsg': [{ type: Input },],
        'errorBrowserMsgChange': [{ type: Output },],
        'restrictionMessage': [{ type: Input },],
        'restrictionActive': [{ type: Input },],
        'logoUrl': [{ type: Input },],
        'contactInfo': [{ type: Input },],
    };
    return NxLoginStepOneComponent;
}());
export { NxLoginStepOneComponent };
//# sourceMappingURL=nx-login-step-one.component.js.map
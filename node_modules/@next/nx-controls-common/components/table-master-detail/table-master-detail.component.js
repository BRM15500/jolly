import { Component, Input, Output, EventEmitter, ViewChild } from '@angular/core';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { of as observableOf } from 'rxjs/observable/of';
import { merge } from 'rxjs/observable/merge';
import { map } from 'rxjs/operators';
import { deepExtend } from '../../shared/deep-extend-argument';
import { ExampleDataSource } from './example-data';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { SelectionModel } from '@angular/cdk/collections';
var NxTableMasterDetailComponent = /** @class */ (function () {
    function NxTableMasterDetailComponent() {
        this.showEvent = new EventEmitter();
        this.selectEvent = new EventEmitter();
        this.showParentEvent = new EventEmitter();
        this.downloadEvent = new EventEmitter();
        this.printEvent = new EventEmitter();
        this.nxId = 'nx-table-master';
        this.selection = new SelectionModel(true, []);
        this.defaultConfig = {};
        this.baseConfig = {
            type: 'single',
            styleClass: 'mat-table',
            rowIconClass: 'icon ion-eye',
            locale: 'en-US',
            checkboxColumn: false,
            detailCbColumn: false,
            displayedColumns: {},
            detailColumns: [],
            indicatorColumns: [],
            buttonDisplayReference: [],
            pagination: {
                visible: true,
                pageSize: '10',
                itemsPerPageLabel: '',
                prepositionLabel: ' de '
            }
        };
        this.detailConfig = {
            rowIconClass: 'icon ion-eye'
        };
        this.titles = [];
        this.extendTitles = [];
        this.expandedDetail = ['expandedDetail'];
        this.exampleData = new ExampleDataSource();
        this.dataCollection = new ExampleDataSource();
        this.prepositionLabel = '';
        this.pageIndex = 0;
        this.isExpansionDetailRow = function (i, row) { return row.detailRow === true; };
        this.expandedElement = [];
    }
    NxTableMasterDetailComponent.prototype.updateManualPage = function (index) {
        // this.pageIndex = index;
        this.paginator.pageIndex = index;
        this.paginator.page.next({
            pageIndex: this.paginator.pageIndex,
            pageSize: this.paginator.pageSize,
            length: this.paginator.length
        });
    };
    NxTableMasterDetailComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.defaultConfig = this.prepareConfig();
        var _config = this.defaultConfig;
        this.paginator._intl.itemsPerPageLabel = this.defaultConfig.pagination.itemsPerPageLabel;
        this.paginator._intl.nextPageLabel = '>';
        this.paginator._intl.previousPageLabel = '<';
        this.prepositionLabel = this.defaultConfig.pagination.prepositionLabel;
        this.paginator._intl.getRangeLabel = function (page, pageSize, length) {
            if (length === 0 || pageSize === 0) {
                return "0 " + _this.prepositionLabel + " " + length;
            }
            length = Math.max(length, 0);
            var startIndex = page * pageSize;
            // If the start index exceeds the list length, do not try and fix the end index to the end.
            var endIndex = startIndex < length
                ? Math.min(startIndex + pageSize, length)
                : startIndex + pageSize;
            return startIndex + 1 + " - " + endIndex + " " + _this.prepositionLabel + " " + length;
        };
        this.titles = Object.keys(_config.displayedColumns).map(function (pIndex) {
            var a = pIndex;
            return a;
        });
        this.titles.forEach(function (val) {
            _this.extendTitles.push(val);
        });
        if (this.defaultConfig.checkboxColumn) {
            this.extendTitles.unshift('selectBox');
        }
        if (this.defaultConfig.detailCbColumn) {
            this.expandedDetail.unshift('selectBox');
        }
    };
    NxTableMasterDetailComponent.prototype.ngOnDestroy = function () {
        this.dataSubject.unsubscribe();
        // this.mergeObserver.unsubscribe();
        this.exampleData.clearSeed();
    };
    NxTableMasterDetailComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var _config = this.defaultConfig;
        // detailRow
        this.dataSubject.asObservable().subscribe(function (d) {
            _this.selection.clear();
            _this.exampleData.clearSeed();
            _this.paginator.firstPage();
            // this.expandedElement = [];
            var _t = 1;
            d.forEach(function (r) {
                var n = r;
                n['detailRow'] = false;
                n['refId'] = _t;
                n['expanded'] = false;
                _config.locale = _config.locale.length > 0 ? _config.locale : 'en-US';
                _this.exampleData.addSeed(n);
                // if (r.hasOwnProperty('detail')) {
                //   r.detail.forEach((child: any) => {
                //     let _n: any = { detailRow: true };
                //     _n['parent'] = r;
                //     _n['refId'] = _t;
                //     _n['detail'] = child;
                //     this.exampleData.addData(_n);
                //   });
                // }
                _t = _t + 1;
            });
            // data = d;
            var seed = _this.exampleData.getSeed();
            // Combine everything that affects the rendered data into one update
            // stream for the data-table to consume.
            var dataMutations = [
                observableOf(seed),
                _this.paginator.page,
                _this.sort.sortChange
            ];
            // Set the paginators length
            _this.paginator.length = seed.length;
            // console.log(seed.length);
            _this.mergeObserver = merge.apply(void 0, dataMutations).pipe(map(function () {
                return _this.getPagedData(_this.getSortedData(seed.slice()));
            }))
                .subscribe(function (j) {
                _this.exampleData.clearData();
                j.forEach(function (o) {
                    _this.exampleData.addData(o);
                    // console.log(o);
                    if (o.hasOwnProperty('detail')) {
                        if (_this.defaultConfig.type === 'single') {
                            var _n = { detailRow: true };
                            _n['parent'] = o;
                            _n['refId'] = o.refId;
                            _n['detail'] = o.detail;
                            _this.exampleData.addData(_n);
                        }
                        else {
                            o.detail.forEach(function (child) {
                                var _n = { detailRow: true };
                                _n['parent'] = o;
                                _n['refId'] = o.refId;
                                _n['detail'] = child;
                                _this.exampleData.addData(_n);
                            });
                        }
                    }
                });
                _this.dataCollection = new ExampleDataSource();
            });
        });
    };
    NxTableMasterDetailComponent.prototype.prepareConfig = function () {
        return deepExtend({}, this.baseConfig, this.config);
    };
    /**
     * Paginate the data (client-side). If you're using server-side pagination,
     * this would be replaced by requesting the appropriate data from the server.
     */
    NxTableMasterDetailComponent.prototype.getPagedData = function (_data) {
        var startIndex = this.paginator.pageIndex * this.paginator.pageSize;
        return _data.splice(startIndex, this.paginator.pageSize);
    };
    /**
     * Sort the data (client-side). If you're using server-side sorting,
     * this would be replaced by requesting the appropriate data from the server.
     */
    NxTableMasterDetailComponent.prototype.getSortedData = function (_data) {
        var _this = this;
        if (!this.sort.active || this.sort.direction === '') {
            return _data;
        }
        return _data.sort(function (a, b) {
            var isAsc = _this.sort.direction === 'asc';
            // console.log(this.sort.active);
            // console.log(isAsc);
            return compare(a[_this.sort.active], b[_this.sort.active], isAsc);
        });
    };
    NxTableMasterDetailComponent.prototype.clickToggle = function (row, col) {
        row['column'] = col;
        if (this.expandedElement.indexOf(row.refId) !== -1) {
            this.expandedElement = this.expandedElement.filter(function (_i) {
                return _i !== row.refId;
            });
            // Set the row as closed
            row.expanded = false;
        }
        else {
            if (row.detailArrows) {
                if (col === 'showDetail') {
                    if (this.defaultConfig.displayedColumns[col].expand) {
                        row.expanded = true;
                        this.expandedElement.push(row.refId);
                    }
                }
                else if (col === 'actionCols') {
                    //
                }
                else {
                    row.expanded = true;
                    this.expandedElement.push(row.refId);
                }
            }
        }
        this.showParentEvent.emit(row);
    };
    NxTableMasterDetailComponent.prototype.clickEvent = function (event) {
        this.showEvent.emit(event);
    };
    /** Whether the number of selected elements matches the total number of rows. */
    NxTableMasterDetailComponent.prototype.isAllSelected = function () {
        var numSelected = this.selection.selected.length;
        var data = this.exampleData.getData();
        var numRows = data.length;
        return numSelected === numRows;
    };
    /** Selects all rows if they are not all selected; otherwise clear selection. */
    NxTableMasterDetailComponent.prototype.masterChecked = function () {
        var _this = this;
        var data = this.exampleData.getData();
        this.isAllSelected()
            ? this.selection.clear()
            : data.forEach(function (row) { return _this.selection.select(row); });
        // console.log(this.selection.selected);
        this.selectEvent.emit(this.selection.selected);
    };
    NxTableMasterDetailComponent.prototype.rowChecked = function (item, e) {
        // e ? console.log(e) : console.log('Null');
        var _this = this;
        if (item) {
            var data = this.exampleData.getData();
            data.forEach(function (row) {
                if (row.detailRow && !item.detailRow && row.refId === item.refId) {
                    // this.selection.toggle(row);
                    _this.selection.deselect(row);
                    if (e && e.checked) {
                        _this.selection.select(row);
                    }
                }
            });
        }
        this.selectEvent.emit(this.selection.selected);
    };
    NxTableMasterDetailComponent.prototype.showClick = function (_event) {
        this.showEvent.emit(_event);
    };
    NxTableMasterDetailComponent.prototype.printClick = function (_event) {
        this.printEvent.emit(_event);
    };
    NxTableMasterDetailComponent.prototype.downloadClick = function (_event) {
        this.downloadEvent.emit(_event);
    };
    NxTableMasterDetailComponent.prototype.expandedRestore = function () {
        this.expandedElement = [];
    };
    NxTableMasterDetailComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-table-master-detail',
                    template: "\n    <div class=\"oss-table-container mat-elevation-z8\" id=\"{{nxId}}\">\n      <mat-table\n        matSort\n        [dataSource]=\"dataCollection\"\n        [class]=\"defaultConfig.styleClass\"\n      >\n        <!--- Note that these columns can be defined in any order.\n              The actual rendered columns are set as a property on the row definition\" -->\n\n        <!-- Checkbox Column -->\n        <ng-container matColumnDef=\"selectBox\">\n          <mat-header-cell *matHeaderCellDef>\n            <mat-checkbox\n              (change)=\"$event ? masterChecked() : null\"\n              [checked]=\"selection.hasValue() && isAllSelected()\"\n              [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n            >\n            </mat-checkbox>\n          </mat-header-cell>\n          <mat-cell [class]=\"\" *matCellDef=\"let row\">\n            <mat-checkbox\n              (click)=\"$event.stopPropagation()\"\n              (change)=\"$event ? selection.toggle(row) : null; rowChecked(row, $event)\"\n              [checked]=\"selection.isSelected(row)\"\n            >\n            </mat-checkbox>\n          </mat-cell>\n        </ng-container>\n\n        <!-- Dynamic Columns -->\n        <ng-container matColumnDef=\"{{ col }}\" *ngFor=\"let col of titles\">\n          <mat-header-cell *matHeaderCellDef mat-sort-header>\n            {{ defaultConfig.displayedColumns[col].title }}\n          </mat-header-cell>\n          <mat-cell *matCellDef=\"let element\" (click)=\"clickToggle(element, col)\">\n            <ng-template [ngIf]=\"col !== 'showDetail' && col !== 'actionCols'\">\n              <span [ngClass]=\"defaultConfig.displayedColumns[col].pipe === 'currency' && element[col] ? 'sign' : 'no-sign'\"></span>\n              {{ defaultConfig.displayedColumns[col].pipe === 'date' ?\n              (element[col] | date:defaultConfig.displayedColumns[col].format:'':(defaultConfig.locale ? defaultConfig.locale : 'en-US')) :\n              defaultConfig.displayedColumns[col].pipe === 'currency' ? (element[col] | currency : (defaultConfig.displayedColumns[col].format ? defaultConfig.displayedColumns[col].format : 'USD'):'symbol':'':(defaultConfig.locale ? defaultConfig.locale : 'en-US')) : element[col] }}\n            </ng-template>\n\n            <ng-template [ngIf]=\"col === 'actionCols' && defaultConfig.displayedColumns[col].description === undefined\">\n              <i [class]=\"defaultConfig.displayedColumns[col].class\"></i>\n            </ng-template>\n\n            <ng-template [ngIf]=\"col === 'actionCols' && defaultConfig.displayedColumns[col].description\">\n              <a [class]=\"defaultConfig.displayedColumns[col].class\">\n                {{ defaultConfig.displayedColumns[col].description }}\n              </a>\n            </ng-template>\n\n            <ng-template [ngIf]=\"col === 'showDetail'\">\n              <i [class]=\"defaultConfig.rowIconClass\"></i>\n            </ng-template>\n\n            <ng-template [ngIf]=\"defaultConfig.indicatorColumns.includes(col) && element.detailArrows\">\n              <i\n                class=\"icon ion-chevron-down indicator\"\n                [ngClass]=\"{\n                  'ion-chevron-down':\n                  expandedElement.indexOf(element.refId) === -1,\n                  'ion-chevron-up': expandedElement.indexOf(element.refId) !== -1\n                }\"\n              ></i>\n            </ng-template>\n          </mat-cell>\n        </ng-container>\n\n        <!-- Expanded Content Column - The detail row is made up of this one column -->\n        <ng-container matColumnDef=\"expandedDetail\">\n          <mat-cell *matCellDef=\"let detail\">\n            <ng-template [ngIf]=\"defaultConfig.type === 'rowTable'\">\n              <nx-table-row-detail-a\n                [content]=\"detail\"\n                [config]=\"defaultConfig\"\n                (clickEvent)=\"clickEvent($event)\"\n              ></nx-table-row-detail-a>\n            </ng-template>\n\n            <ng-template [ngIf]=\"defaultConfig.type === 'single'\">\n              <nx-table-row-detail-b\n                [content]=\"detail\"\n                [reference]=\"defaultConfig.buttonDisplayReference\"\n                (showEvent)=\"showClick($event)\"\n                (printEvent)=\"printClick($event)\"\n                (downloadEvent)=\"downloadClick($event)\"\n              ></nx-table-row-detail-b>\n            </ng-template>\n          </mat-cell>\n        </ng-container>\n\n        <mat-header-row *matHeaderRowDef=\"extendTitles\"></mat-header-row>\n        <mat-row\n          *matRowDef=\"let row; columns: extendTitles\"\n          matRipple\n          class=\"element-row\"\n          [class.expanded]=\"expandedElement.indexOf(row.refId) !== -1\"\n        ></mat-row>\n        <mat-row\n          *matRowDef=\"let row; columns: expandedDetail; when: isExpansionDetailRow\"\n          [@detailExpand]=\"\n          expandedElement.length > 0 && expandedElement.indexOf(row.parent.refId) !== -1\n              ? 'expanded'\n              : 'collapsed'\n          \"\n          style=\"overflow: hidden\"\n        >\n        </mat-row>\n      </mat-table>\n\n      <mat-paginator\n        #paginator\n        [ngStyle]=\"{ display: defaultConfig.pagination.visible ? 'block' : 'none' }\"\n        [pageIndex]=\"0\"\n        [pageSize]=\"this.defaultConfig.pagination.pageSize\"\n        [pageSizeOptions]=\"[10, 25, 50, 100, 200]\"\n      >\n      </mat-paginator>\n    </div>\n  ",
                    animations: [
                        trigger('detailExpand', [
                            state('collapsed', style({ height: '0px', minHeight: '0', visibility: 'hidden' })),
                            state('expanded', style({ height: '*', visibility: 'visible' })),
                            transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))
                        ])
                    ]
                },] },
    ];
    /** @nocollapse */
    NxTableMasterDetailComponent.ctorParameters = function () { return []; };
    NxTableMasterDetailComponent.propDecorators = {
        'config': [{ type: Input },],
        'dataSubject': [{ type: Input },],
        'showEvent': [{ type: Output },],
        'selectEvent': [{ type: Output },],
        'showParentEvent': [{ type: Output },],
        'downloadEvent': [{ type: Output },],
        'printEvent': [{ type: Output },],
        'nxId': [{ type: Input },],
        'paginator': [{ type: ViewChild, args: [MatPaginator,] },],
        'sort': [{ type: ViewChild, args: [MatSort,] },],
    };
    return NxTableMasterDetailComponent;
}());
export { NxTableMasterDetailComponent };
/** Simple sort comparator for example ID/Name columns (for client-side sorting). */
function compare(a, b, isAsc) {
    var fit = '100000000000000000';
    return ((fit + a.toString().toUpperCase() < fit + b.toString().toUpperCase()
        ? -1
        : 1) * (isAsc ? 1 : -1));
}
//# sourceMappingURL=table-master-detail.component.js.map
import { Component, ElementRef, Input, EventEmitter, Renderer2, NgZone } from '@angular/core';
import { ConfirmationService } from '../../services/confirm.service';
var ConfirmDialogComponent = /** @class */ (function () {
    function ConfirmDialogComponent(el, renderer, confirmationService, zone) {
        var _this = this;
        this.el = el;
        this.renderer = renderer;
        this.confirmationService = confirmationService;
        this.zone = zone;
        this.header = '';
        this.acceptIcon = 'fa-check';
        this.acceptLabel = 'Yes';
        this.acceptVisible = true;
        this.rejectIcon = 'fa-close';
        this.rejectLabel = 'No';
        this.rejectVisible = true;
        this.closeOnEscape = true;
        this.closable = true;
        this.responsive = true;
        this.lblOkBtn = 'Aceptar';
        this.lblCancelBtn = 'Cancelar';
        this.nxId = 'nx-confirm-dialog';
        this.subscription = confirmationService.requireConfirmation$.subscribe(function (confirmation) {
            if (confirmation.close) {
                _this.visible = false;
                _this.reject();
            }
            else if (confirmation.key === _this.key) {
                _this.confirmation = confirmation;
                _this.question = _this.confirmation.message || _this.question;
                _this.lblOkBtn = _this.confirmation.lblOkBtn || _this.lblOkBtn;
                _this.lblCancelBtn =
                    _this.confirmation.lblCancelBtn || _this.lblCancelBtn;
                _this.icon = _this.confirmation.icon || _this.icon;
                _this.header = _this.confirmation.header || _this.header;
                _this.rejectVisible =
                    _this.confirmation.rejectVisible == null
                        ? _this.rejectVisible
                        : _this.confirmation.rejectVisible;
                _this.acceptVisible =
                    _this.confirmation.acceptVisible == null
                        ? _this.acceptVisible
                        : _this.confirmation.acceptVisible;
                if (_this.confirmation.accept) {
                    _this.confirmation.acceptEvent = new EventEmitter();
                    _this.confirmation.acceptEvent.subscribe(_this.confirmation.accept);
                }
                if (_this.confirmation.reject) {
                    _this.confirmation.rejectEvent = new EventEmitter();
                    _this.confirmation.rejectEvent.subscribe(_this.confirmation.reject);
                }
                _this.visible = true;
            }
        });
    }
    Object.defineProperty(ConfirmDialogComponent.prototype, "visible", {
        get: function () {
            return this._visible;
        },
        set: function (val) {
            this._visible = val;
            if (this._visible) {
                if (!this.positionInitialized) {
                    this.center();
                    this.positionInitialized = true;
                }
                this.executePostShowActions = true;
            }
            if (this._visible) {
                this.enableModality();
            }
            else {
                this.disableModality();
            }
        },
        enumerable: true,
        configurable: true
    });
    ConfirmDialogComponent.prototype.ngAfterViewInit = function () {
        //
    };
    ConfirmDialogComponent.prototype.ngAfterViewChecked = function () {
        //
    };
    ConfirmDialogComponent.prototype.center = function () {
        //
    };
    ConfirmDialogComponent.prototype.enableModality = function () {
        //
    };
    ConfirmDialogComponent.prototype.disableModality = function () {
        //
    };
    ConfirmDialogComponent.prototype.close = function (event) {
        if (this.confirmation.rejectEvent) {
            this.confirmation.rejectEvent.emit();
        }
        this.hide();
        event.preventDefault();
    };
    ConfirmDialogComponent.prototype.hide = function () {
        this.visible = false;
    };
    ConfirmDialogComponent.prototype.bindGlobalListeners = function () {
        //
    };
    ConfirmDialogComponent.prototype.unbindGlobalListeners = function () {
        //
    };
    ConfirmDialogComponent.prototype.ngOnDestroy = function () {
        this.disableModality();
        if (this.documentResponsiveListener) {
            this.documentResponsiveListener();
        }
        if (this.documentEscapeListener) {
            this.documentEscapeListener();
        }
        if (this.appendTo && this.appendTo === 'body') {
            document.body.removeChild(this.el.nativeElement);
        }
        this.subscription.unsubscribe();
    };
    ConfirmDialogComponent.prototype.accept = function () {
        if (this.confirmation.acceptEvent) {
            this.confirmation.acceptEvent.emit();
        }
        this.hide();
        this.confirmation = null;
    };
    ConfirmDialogComponent.prototype.reject = function () {
        if (this.confirmation && this.confirmation.rejectEvent) {
            this.confirmation.rejectEvent.emit();
        }
        this.hide();
        this.confirmation = null;
    };
    ConfirmDialogComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-confirm-dialog',
                    template: "\n    <div class=\"oss-dialog-modal\" [ngClass]=\"{ 'oss-dialog-active': _visible }\" id=\"{{nxId}}\">\n      <div class=\"oss-dialog\">\n        <div class=\"oss-dialog-content\">\n          <div class=\"dialog-content ui-widget-content\">\n            <h4>{{ question }}</h4>\n          </div>\n\n          <div class=\"dialog-footer\">\n            <button type=\"button\" (click)=\"accept()\" class=\"default\">\n              {{ lblOkBtn }}\n            </button>\n            <b></b>\n            <button type=\"button\" (click)=\"reject()\" class=\"orange\">\n              {{ lblCancelBtn }}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    ConfirmDialogComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer2, },
        { type: ConfirmationService, },
        { type: NgZone, },
    ]; };
    ConfirmDialogComponent.propDecorators = {
        'question': [{ type: Input },],
        'icon': [{ type: Input },],
        'header': [{ type: Input },],
        'message': [{ type: Input },],
        'acceptIcon': [{ type: Input },],
        'acceptLabel': [{ type: Input },],
        'acceptVisible': [{ type: Input },],
        'rejectIcon': [{ type: Input },],
        'rejectLabel': [{ type: Input },],
        'rejectVisible': [{ type: Input },],
        'acceptButtonStyleClass': [{ type: Input },],
        'rejectButtonStyleClass': [{ type: Input },],
        'width': [{ type: Input },],
        'height': [{ type: Input },],
        'closeOnEscape': [{ type: Input },],
        'rtl': [{ type: Input },],
        'closable': [{ type: Input },],
        'responsive': [{ type: Input },],
        'appendTo': [{ type: Input },],
        'key': [{ type: Input },],
        'lblOkBtn': [{ type: Input },],
        'lblCancelBtn': [{ type: Input },],
        'nxId': [{ type: Input },],
        'visible': [{ type: Input },],
    };
    return ConfirmDialogComponent;
}());
export { ConfirmDialogComponent };
//# sourceMappingURL=confirm-dialog.component.js.map
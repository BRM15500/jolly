import { Component, ViewChild, Output, EventEmitter, Input } from '@angular/core';
var SelectEditableComponent = /** @class */ (function () {
    function SelectEditableComponent() {
        this.saveEvent = new EventEmitter();
        this.changeEvent = new EventEmitter();
        this.setValue = { value: 0, description: '', note: '' };
        this.nxId = 'nx-select-editable';
        this.editing = false;
    }
    SelectEditableComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.collection) {
            if (this.setValue.value === 0) {
                this.setValue = this.collection[0];
                this.note = this.setValue.note;
            }
            else {
                this.collection.forEach(function (c) {
                    if (c.value === _this.setValue.value) {
                        _this.setValue = c;
                        _this.note = _this.setValue.note;
                    }
                });
            }
        }
    };
    SelectEditableComponent.prototype.editEvent = function () {
        var _this = this;
        this.editing = true;
        setTimeout(function () {
            _this.trgFocusEl.nativeElement.focus();
        }, 30);
    };
    SelectEditableComponent.prototype.cancelEvent = function () {
        this.editing = false;
    };
    SelectEditableComponent.prototype.keyupEvent = function (e) {
        var _this = this;
        if (e.keyCode === 13) {
            var val_1 = {
                value: this.setValue.value,
                description: this.setValue.description,
                note: this.setValue.note,
                newAlias: this.trgFocusEl.nativeElement.value
            };
            this.saveEvent.emit(val_1);
            this.collection.forEach(function (item) {
                if (item.value === _this.setValue.value) {
                    item.description = val_1.newAlias;
                    _this.setValue = item;
                }
            });
            // this.value = data[this.arrowkeyLocation][this.fieldsShow[0]];
            this.trgFocusEl.nativeElement.value = '';
            this.editing = false;
        }
    };
    SelectEditableComponent.prototype.onChangeEvent = function () {
        this.note = this.setValue.note;
        this.changeEvent.emit(this.setValue);
    };
    SelectEditableComponent.prototype.compareFn = function (x, y) {
        // return x && y ? x.id === y.id : x === y;
        return x && y ? x.value === y.value : x === y;
    };
    SelectEditableComponent.prototype.setNote = function (note) {
        this.note = note;
    };
    SelectEditableComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-select-editable',
                    template: "\n    <div class=\"oss-se\" id=\"{{nxId}}\">\n      <mat-form-field class=\"oss-mat-select\">\n        <mat-select placeholder=\"{{ placeholder }}\" [(value)]=\"setValue\" (selectionChange)=\"onChangeEvent()\" [compareWith]=\"compareFn\">\n          <mat-select-trigger>\n            {{setValue.description}}\n          </mat-select-trigger>\n          <mat-option *ngFor=\"let item of collection\" [value]=\"item\">\n            <h5>{{ item.description }}</h5>\n            <span>{{ item.note }}</span>\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n      <button *ngIf=\"!editing\" (click)=\"editEvent()\" class=\"clear oss-se-edit-btn\">\n        <i class=\"icon ion-edit\"></i>\n      </button>\n      <button *ngIf=\"editing\" (click)=\"cancelEvent()\" class=\"clear oss-se-edit-btn\">\n        <i class=\"icon ion-close\"></i>\n      </button>\n      <div>\n        <input #boxy [ngClass]=\"{'active': editing}\" type=\"text\" (keyup)=\"keyupEvent($event)\" class=\"oss-se-edit-box\">\n        <label #boxylabel class=\"oss-se-label\">{{ setValue.note }}</label>\n      </div>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    SelectEditableComponent.ctorParameters = function () { return []; };
    SelectEditableComponent.propDecorators = {
        'trgFocusEl': [{ type: ViewChild, args: ['boxy',] },],
        'saveEvent': [{ type: Output },],
        'changeEvent': [{ type: Output },],
        'collection': [{ type: Input },],
        'placeholder': [{ type: Input },],
        'setValue': [{ type: Input },],
        'nxId': [{ type: Input },],
    };
    return SelectEditableComponent;
}());
export { SelectEditableComponent };
//# sourceMappingURL=select-editable.component.js.map
import { Component, Input, Output, EventEmitter } from '@angular/core';
var AutocompleteComponent = /** @class */ (function () {
    function AutocompleteComponent() {
        this.keyUp = new EventEmitter();
        this.afterClick = new EventEmitter();
        this.nxId = 'nx-autocomplete';
        this.arrowkeyLocation = 0;
        /**
         * Constructor
         */
    }
    AutocompleteComponent.prototype.keyupEvent = function (e) {
        switch (e.keyCode) {
            case 38:// this is the ascii of arrow up
                this.arrowkeyLocation--;
                break;
            case 40:// this is the ascii of arrow down
                this.arrowkeyLocation++;
                break;
        }
        if (e.keyCode === 38 || e.keyCode === 40) {
            this.selectItem(e.target, this.arrowkeyLocation);
        }
        else if (e.keyCode === 13) {
            var data = this.collection;
            this.afterClick.emit(data[this.arrowkeyLocation]);
            this.value = data[this.arrowkeyLocation][this.fieldsShow[0]];
            this.collection = [];
        }
        else {
            this.keyUp.emit(e.target.value);
        }
    };
    AutocompleteComponent.prototype.ngOnChanges = function (changes) {
        if (changes['collection']) {
            this.collection = this.collection;
        }
    };
    AutocompleteComponent.prototype.clickEvent = function (e) {
        this.afterClick.emit(e);
        this.collection = [];
        this.value = e[this.fieldsShow[0]];
    };
    AutocompleteComponent.prototype.selectItem = function (element, index) {
        // console.log(element);
        var parent = element.parentElement;
        var list = parent.getElementsByTagName('li');
        for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
            var li = list_1[_i];
            li.className = '';
        }
        if (index >= 0 && index < list.length) {
            var item = list[index];
            item.className = 'active';
        }
        else {
            this.arrowkeyLocation = 0;
        }
    };
    AutocompleteComponent.decorators = [
        { type: Component, args: [{
                    selector: 'nx-autocomplete',
                    template: "\n    <div class=\"oss-autocomplete\" id=\"{{nxId}}\">\n    <input id=\"autocompleteBox\" [ngModel]=\"value\" (ngModelChange)=\"value = $event\" (keyup)=\"keyupEvent($event)\">\n\n    <div class=\"oss-autocomplete-list\">\n        <ul *ngIf=\"collection\">\n            <li *ngFor=\"let result of collection | slice:0:15\" (click)=\"clickEvent(result)\">\n                <span *ngFor=\"let field of fieldsShow; let i = index;\">\n                  {{ i > 0 ? \" - \" : \"\" }}\n                  {{ result[field] }}\n              </span>\n            </li>\n          </ul>\n    </div>\n    </div>\n  "
                },] },
    ];
    /** @nocollapse */
    AutocompleteComponent.ctorParameters = function () { return []; };
    AutocompleteComponent.propDecorators = {
        'collection': [{ type: Input },],
        'fieldsShow': [{ type: Input },],
        'keyUp': [{ type: Output },],
        'afterClick': [{ type: Output },],
        'value': [{ type: Input },],
        'nxId': [{ type: Input },],
    };
    return AutocompleteComponent;
}());
export { AutocompleteComponent };
//# sourceMappingURL=autocomplete.component.js.map